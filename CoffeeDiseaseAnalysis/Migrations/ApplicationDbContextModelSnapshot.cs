// <auto-generated />
using System;
using CoffeeDiseaseAnalysis.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeDiseaseAnalysis.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectDiseaseName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FeedbackDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("FeedbackText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FeedbackType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Manual");

                    b.Property<bool>("IsUsedForTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PredictionId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackDate");

                    b.HasIndex("FeedbackType");

                    b.HasIndex("IsUsedForTraining");

                    b.HasIndex("PredictionId");

                    b.HasIndex("Rating");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.LeafImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("ImageHash")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("ImageStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageHash");

                    b.HasIndex("ImageStatus");

                    b.HasIndex("UploadDate");

                    b.HasIndex("UserId");

                    b.ToTable("LeafImages");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.LeafImageSymptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Intensity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("LeafImageId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ObservedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ObservedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Intensity");

                    b.HasIndex("ObservedByUserId");

                    b.HasIndex("ObservedDate");

                    b.HasIndex("SymptomId");

                    b.HasIndex("LeafImageId", "SymptomId")
                        .IsUnique();

                    b.ToTable("LeafImageSymptoms");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.ModelVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Accuracy")
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeployedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileChecksum")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsProduction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("CNN");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("TestAccuracy")
                        .HasColumnType("decimal(5,4)");

                    b.Property<int>("TestSamples")
                        .HasColumnType("int");

                    b.Property<string>("TrainingDatasetVersion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TrainingSamples")
                        .HasColumnType("int");

                    b.Property<decimal?>("ValidationAccuracy")
                        .HasColumnType("decimal(5,4)");

                    b.Property<int>("ValidationSamples")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsProduction");

                    b.HasIndex("ModelType");

                    b.HasIndex("ModelName", "Version")
                        .IsUnique();

                    b.ToTable("ModelVersions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accuracy = 0.8500m,
                            CreatedAt = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FilePath = "/models/coffee_resnet50_v1.0.h5",
                            FileSizeBytes = 265281000L,
                            IsActive = false,
                            IsProduction = false,
                            ModelName = "coffee_resnet50",
                            ModelType = "CNN",
                            Notes = "Mô hình ResNet50 ban đầu - baseline model",
                            TestAccuracy = 0.8100m,
                            TestSamples = 400,
                            TrainingDatasetVersion = "v1.0",
                            TrainingSamples = 2000,
                            ValidationAccuracy = 0.8200m,
                            ValidationSamples = 400,
                            Version = "v1.0"
                        },
                        new
                        {
                            Id = 2,
                            Accuracy = 0.8750m,
                            CreatedAt = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DeployedAt = new DateTime(2023, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            FilePath = "/models/coffee_resnet50_v1.1.onnx",
                            FileSizeBytes = 120000000L,
                            IsActive = true,
                            IsProduction = true,
                            ModelName = "coffee_resnet50",
                            ModelType = "CNN",
                            Notes = "Cải tiến với data augmentation, fine-tuning và chuyển đổi sang ONNX",
                            TestAccuracy = 0.8400m,
                            TestSamples = 500,
                            TrainingDatasetVersion = "v1.1",
                            TrainingSamples = 2500,
                            ValidationAccuracy = 0.8500m,
                            ValidationSamples = 500,
                            Version = "v1.1"
                        },
                        new
                        {
                            Id = 3,
                            Accuracy = 0.7200m,
                            CreatedAt = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FilePath = "/models/coffee_mlp_v1.0.onnx",
                            FileSizeBytes = 5000000L,
                            IsActive = true,
                            IsProduction = false,
                            ModelName = "coffee_mlp",
                            ModelType = "MLP",
                            Notes = "MLP cho phân tích triệu chứng - hỗ trợ CNN",
                            TestAccuracy = 0.6900m,
                            TestSamples = 300,
                            TrainingDatasetVersion = "v1.0",
                            TrainingSamples = 1500,
                            ValidationAccuracy = 0.7000m,
                            ValidationSamples = 300,
                            Version = "v1.0"
                        },
                        new
                        {
                            Id = 4,
                            Accuracy = 0.9100m,
                            CreatedAt = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FilePath = "/models/coffee_combined_v1.0.onnx",
                            FileSizeBytes = 125000000L,
                            IsActive = true,
                            IsProduction = false,
                            ModelName = "coffee_combined",
                            ModelType = "Combined",
                            Notes = "Kết hợp CNN và MLP với trọng số 0.7:0.3",
                            TestAccuracy = 0.8800m,
                            TestSamples = 500,
                            TrainingDatasetVersion = "v1.1",
                            TrainingSamples = 2500,
                            ValidationAccuracy = 0.8900m,
                            ValidationSamples = 500,
                            Version = "v1.0"
                        },
                        new
                        {
                            Id = 5,
                            Accuracy = 0.9200m,
                            CreatedAt = new DateTime(2023, 12, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            FilePath = "/models/coffee_resnet50_v2.0.onnx",
                            FileSizeBytes = 118000000L,
                            IsActive = false,
                            IsProduction = false,
                            ModelName = "coffee_resnet50",
                            ModelType = "CNN",
                            Notes = "Huấn luyện lại với feedback từ người dùng và SMOTE để xử lý dữ liệu không cân bằng",
                            TestAccuracy = 0.8950m,
                            TestSamples = 600,
                            TrainingDatasetVersion = "v2.0",
                            TrainingSamples = 3000,
                            ValidationAccuracy = 0.9000m,
                            ValidationSamples = 600,
                            Version = "v2.0"
                        });
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.Prediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Confidence")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("FinalConfidence")
                        .HasColumnType("decimal(5,4)");

                    b.Property<int>("LeafImageId")
                        .HasColumnType("int");

                    b.Property<string>("ModelVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PredictionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ProcessingTimeMs")
                        .HasColumnType("int");

                    b.Property<string>("SeverityLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TreatmentSuggestion")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseName");

                    b.HasIndex("ModelVersion");

                    b.HasIndex("PredictionDate");

                    b.HasIndex("LeafImageId", "ModelVersion");

                    b.ToTable("Predictions");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.PredictionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LeafImageId")
                        .HasColumnType("int");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModelVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProcessingTimeMs")
                        .HasColumnType("int");

                    b.Property<string>("RequestId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServerNode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApiStatus");

                    b.HasIndex("LeafImageId");

                    b.HasIndex("ModelType");

                    b.HasIndex("ModelVersion");

                    b.HasIndex("RequestId");

                    b.HasIndex("RequestTime");

                    b.ToTable("PredictionLogs");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(1.0m);

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Leaf",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Các vệt màu nâu xuất hiện trên bề mặt lá",
                            IsActive = true,
                            Name = "Vệt nâu trên lá",
                            Weight = 0.8m
                        },
                        new
                        {
                            Id = 2,
                            Category = "Leaf",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Các đốm màu cam đỏ đặc trưng của bệnh rỉ sắt",
                            IsActive = true,
                            Name = "Vết đốm cam đỏ",
                            Weight = 0.9m
                        },
                        new
                        {
                            Id = 3,
                            Category = "Leaf",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Lá bị héo, mất độ tươi",
                            IsActive = true,
                            Name = "Lá héo",
                            Weight = 0.7m
                        },
                        new
                        {
                            Id = 4,
                            Category = "Leaf",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Lá chuyển màu vàng bất thường",
                            IsActive = true,
                            Name = "Lá vàng",
                            Weight = 0.6m
                        },
                        new
                        {
                            Id = 5,
                            Category = "Leaf",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Viền lá chuyển màu nâu",
                            IsActive = true,
                            Name = "Đường viền lá nâu",
                            Weight = 0.7m
                        },
                        new
                        {
                            Id = 6,
                            Category = "Leaf",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Các lỗ nhỏ do sâu đục",
                            IsActive = true,
                            Name = "Lỗ thủng trên lá",
                            Weight = 0.8m
                        },
                        new
                        {
                            Id = 7,
                            Category = "Leaf",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bề mặt lá bị khô, nứt nẻ",
                            IsActive = true,
                            Name = "Bề mặt lá khô",
                            Weight = 0.6m
                        },
                        new
                        {
                            Id = 8,
                            Category = "Leaf",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Các vệt màu trắng do nấm",
                            IsActive = true,
                            Name = "Vệt trắng",
                            Weight = 0.75m
                        },
                        new
                        {
                            Id = 9,
                            Category = "Leaf",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Lá bị cong vặn do sâu bệnh",
                            IsActive = true,
                            Name = "Lá cong vặn",
                            Weight = 0.85m
                        },
                        new
                        {
                            Id = 10,
                            Category = "Leaf",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Mép lá bị khô, cháy",
                            IsActive = true,
                            Name = "Mép lá khô",
                            Weight = 0.65m
                        });
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.TrainingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DatasetSplit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("train");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsedForTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsValidated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LeafImageId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("OriginalConfidence")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("OriginalPrediction")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ValidatedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DatasetSplit");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("IsUsedForTraining");

                    b.HasIndex("IsValidated");

                    b.HasIndex("Label");

                    b.HasIndex("LeafImageId");

                    b.HasIndex("Quality");

                    b.HasIndex("Source");

                    b.HasIndex("ValidatedByUserId");

                    b.ToTable("TrainingDataRecords");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("User");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FullName");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.Feedback", b =>
                {
                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.Prediction", "Prediction")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PredictionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Prediction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.LeafImage", b =>
                {
                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.User", "User")
                        .WithMany("LeafImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.LeafImageSymptom", b =>
                {
                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.LeafImage", "LeafImage")
                        .WithMany("LeafImageSymptoms")
                        .HasForeignKey("LeafImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.User", "ObservedByUser")
                        .WithMany()
                        .HasForeignKey("ObservedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.Symptom", "Symptom")
                        .WithMany("LeafImageSymptoms")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LeafImage");

                    b.Navigation("ObservedByUser");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.ModelVersion", b =>
                {
                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.Prediction", b =>
                {
                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.LeafImage", "LeafImage")
                        .WithMany("Predictions")
                        .HasForeignKey("LeafImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LeafImage");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.PredictionLog", b =>
                {
                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.LeafImage", "LeafImage")
                        .WithMany("PredictionLogs")
                        .HasForeignKey("LeafImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LeafImage");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.TrainingData", b =>
                {
                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.Feedback", "SourceFeedback")
                        .WithMany()
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.LeafImage", "LeafImage")
                        .WithMany("TrainingDataRecords")
                        .HasForeignKey("LeafImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.User", "ValidatedByUser")
                        .WithMany()
                        .HasForeignKey("ValidatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LeafImage");

                    b.Navigation("SourceFeedback");

                    b.Navigation("ValidatedByUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoffeeDiseaseAnalysis.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.LeafImage", b =>
                {
                    b.Navigation("LeafImageSymptoms");

                    b.Navigation("PredictionLogs");

                    b.Navigation("Predictions");

                    b.Navigation("TrainingDataRecords");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.Prediction", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.Symptom", b =>
                {
                    b.Navigation("LeafImageSymptoms");
                });

            modelBuilder.Entity("CoffeeDiseaseAnalysis.Data.Entities.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("LeafImages");
                });
#pragma warning restore 612, 618
        }
    }
}
